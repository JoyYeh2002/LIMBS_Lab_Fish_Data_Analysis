%% fig05b03_tail_curvature_vs_illuminance_bars.m
% Loop through different kinds of averages and save plots
% Using curve 4 - 9 till end doesn't make a big difference
% Trend is still messy

% close all;
addpath 'helper_functions'

%% 1. Specify folder paths
parent_dir = fullfile(pwd, '..', '..');
abs_path = fullfile(parent_dir, 'data_structures\');
out_path = fullfile(parent_dir, 'figures\');
out_pdf_path = fullfile(parent_dir, 'figures_pdf\');

out_archive_path = fullfile(parent_dir, 'figures_archive\fig05b_tail_curv_all_fish\');
if ~exist(out_archive_path, 'dir')
    mkdir(out_archive_path);
end

pdf_path = fullfile(parent_dir, 'figures_pdf\');

close all

colorMap = cool(6);

%% 2. Load the full body struct and tail FFT struct
all_fish = load(fullfile(abs_path, 'data_clean_body.mat'), 'all_fish').all_fish;
fishNames = {'Hope', 'Len', 'Doris', 'Finn', 'Ruby'}; % consistent with SICB

% Keep populating the res FFT struct
res = load(fullfile(abs_path, 'result_tail_curvature.mat'), 'res').res;

y_lims = [140, 120, 80];

num_body_pts = 12;
num_fish = 5;
target_pt = 12; % only look at tail

% colorMap = cool(num_fish+1);
figure;
hold on;
set(gca, 'XScale', 'log'); % Set log scale for x-axis

%% 2. Gather data
all_data_pts = [];
curvature_mean = cell(5, 1);
this_fish_mean = zeros(5, 1);
for i = 1:num_fish
    num_ils = numel(res(i).luminances);
    curvature_mean{i} = mean([(res(i).luminances.tail_curvature_mean)], 1); % 1 x 9 double
    this_fish_mean(i) = mean(curvature_mean{i});
    all_data_pts = [all_data_pts, curvature_mean{i}];

end
mean_value_all = mean(all_data_pts);


all_lux = [];
all_data_pts_processed = [];
for i = 1 :num_fish
    fish_name = fishNames{i};

    if i == 1 % Get rid of Hope lux 1, 3, 9
        lux = [0.4, 2, 3.5, 5.5, 7, 9.5, 15, 30, 60, 150, 210];     
    else
        lux = [res(i).luminances.lux];
    end

    % Centered, then smoothed for x-variance values
    data = curvature_mean{i};
    % data_smoothed_centered = data;
    data_smoothed_centered = data - (this_fish_mean(i) - mean_value_all);
    % data_smoothed_centered = movmean(data - (this_fish_mean(i) - mean_value_all), 2);
    
    % Collect all data for Sigmoid fitting
    all_lux = [all_lux, lux];
    all_data_pts_processed = [all_data_pts_processed, data_smoothed_centered];
    plot(lux, data_smoothed_centered * 100, '-', 'LineWidth', 2, 'Marker', 'o', 'MarkerSize', 3, 'Color', colorMap(i, :));

    std_dev = [res(i).luminances.tail_curvature_std];
    errorbar(lux, data_smoothed_centered * 100, std_dev * 100, ...
         'o', 'Color', colorMap(i, :), 'MarkerFaceColor', colorMap(i, :), ...
         'LineWidth', 1.2);
end

%% 3. Fit sigmoid function then plot it
x = log(all_lux);
y = all_data_pts_processed;
[fitted_model, gof] = createSigmoidFit(x, y);

num_sample_points = 500;
x_sample_points = linspace(min(x), max(x), num_sample_points);
y_sample_points = feval(fitted_model, x_sample_points);
a = fitted_model.a;
b = fitted_model.b;
c = fitted_model.c;
d = fitted_model.d;

plot(exp(x_sample_points), y_sample_points * 100, 'Color', 'k', 'LineWidth', 3)

grid on; % Display grid
title(' All Fish Tail Curvature (Mean-Centered)'); % Set plot title
subtitle(['Fitted Sigmoid: a=', num2str(a), ', b=', num2str(b), ...
    ', c=', num2str(c), ', d=', num2str(d)]);

lux_ticks = [0.4, 2, 3.5, 7, 9.5, 15, 30, 60, 210];
xticks(lux_ticks);
xticklabels(lux_ticks);

xlim([0, 220]);
ylim([2, 8]);

xlabel('Illuminance (lux)');
ylabel('Tail Point Average Curvature (cm^2)')
legend('Fish 1', 'Fish 2', 'Fish 3', 'Fish 4', 'Fish 5', ['Sigmoid: R^2 = ', num2str(gof.rsquare)], 'Location', 'southwest'); % Add legend

%% 4. Save to figure
saveas(gcf, [out_path,  'fig05b08_all_fish_tail_curvature_vs_illuminance.png']);
saveas(gcf, [out_pdf_path,  'fig05b08_all_fish_tail_curvature_vs_illuminance.pdf']);
disp('SUCCESS: fig05b07_all_fish_tail_curvature_vs_illuminance.png is saved.');

%% Helper: Sigmoid parameters generated by MATLAB on 12-Mar-2024 15:48:24
function [fitresult, gof] = createSigmoidFit(x, y)
 
[xData, yData] = prepareCurveData( x, y );

ft = fittype( 'a/(1+exp(-b*(x-c)))+d', 'independent', 'x', 'dependent', 'y' );
opts = fitoptions( 'Method', 'NonlinearLeastSquares' );
opts.Display = 'Off';
opts.StartPoint = [0.933993247757551 0.678735154857773 0.757740130578333 0.743132468124916];

[fitresult, gof] = fit( xData, yData, ft, opts );
end

