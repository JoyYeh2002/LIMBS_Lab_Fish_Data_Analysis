%% Step02: plot_TD_varianceX.m
% Updated 03.12.2024
% LIMBS Lab
% Author: Huanying (Joy) Yeh

% Experiment Name: Eigenmannia Virescens Luminance + Locomotion Comparisons
%
% Content:
% - visualize res_head_variances.mat
% - centered, smoothed, then fitted a sigmoid model at R^2 = 0.81

%% 1. Load the data
close all;
abs_path = 'C:\Users\joy20\Folder\FA_2023\LIMBS Presentations\data\fish_structs_2024\';
out_path = 'C:\Users\joy20\Folder\FA_2023\LIMBS Presentations\Outputs\Head_VAR\';

if ~exist(out_path, 'dir')
    mkdir(out_path);
end

load([abs_path, 'res_head_variances.mat']);
fishNames = {'Hope', 'Len', 'Doris', 'Finn', 'Ruby'}; % consistent with SICB

numFish = 5;
num_body_pts = 1;
field_name = 'varX_mean';

plot_avg_trend = 1;
plot_distribution = 0;

if plot_avg_trend == 1
    figure;

    hold on;


    % Get the mean of all
    all_lux = [];
    all_data_pts = [];
    all_data_pts_processed = [];
    for i = 1:numFish
        this_data = res(i).varX_mean;
        all_data_pts = [all_data_pts; this_data];
    end

    mean_value_all = mean(all_data_pts);

    for i = 1:numFish

        colorMap = summer(numFish + 1);

        fish_name = fishNames{i};
        lux = res(i).lux;

        data = res(i).(field_name);
        mean_value_this = mean(data);

        %% Centered, then smoothed for x-variance values
        data_smoothed_centered = smooth(data - (mean_value_this - mean_value_all)) * 1e4;

         % data_smoothed_centered = (data - (mean_value_this - mean_value_all))* 1e4;

        all_lux = [all_lux, lux];
        all_data_pts_processed = [all_data_pts_processed; data_smoothed_centered];

        plot(lux, data_smoothed_centered, '-', 'Color', colorMap(i, :), 'LineWidth', 2, 'Marker', 'o', 'MarkerSize', 3, 'MarkerFaceColor', colorMap(i, :));
    end

    x = log(all_lux');
    y = all_data_pts_processed;
    [fitted_model, gof] = createSigmoidFit(x, y);

    num_sample_points = 500;
    x_sample_points = linspace(min(x), max(x), num_sample_points);

    % Evaluate the fitted model at the sample points
    y_sample_points = feval(fitted_model, x_sample_points);
    a = fitted_model.a;
    b = fitted_model.b;
    c = fitted_model.c;
    d = fitted_model.d;

    plot(exp(x_sample_points), y_sample_points, 'Color', 'red', 'LineWidth', 2)

    set(gca, 'XScale', 'log'); % Set log scale for x-axis
    grid on; % Display grid
    title(['All Fish ', strrep(field_name, '_', ' '), ' Distributions']); % Set plot title
    subtitle(['Fitted Sigmoid: a=', num2str(a), ', b=', num2str(b), ...
        ', c=', num2str(c), ', d=', num2str(d)]);
    x_ticks = res(1).lux;
    xticks(res(1).lux);
    xticklabels(x_ticks);

    xlim([0, 220]);
    % Labeling
    xlabel('Illuminance (lux)');
    ylabel('X-Position Variances (cm^2)')
    legend('Fish 1', 'Fish 2', 'Fish 3', 'Fish 4', 'Fish 5', ['Fitted Sigmoid: R^2 = ', num2str(gof.rsquare)]); % Add legend

    % Save the closed loop bode plots
    out_filename = [field_name, '_head_', fish_name, '_centered_trend.png'];

    saveas(gcf, [out_path, out_filename]);
    disp(['SUCCESS: ', out_filename, ' is saved.']);
end




if plot_distribution == 1
    for i = 1:numFish
        figure;
        hold on;

        fish_name = fishNames{i};
        lux = res(i).lux;
        colorMap = summer(size(lux, 2) + 4);

        for il = 1 : size(lux, 2)

            data = res(i).luminance(il).(field_name); % 17x1 double
            for trial_idx = 1 : size(data, 1)
                c = colorMap(il, :);
                scatter(lux(il), data(trial_idx)*10e3, 'MarkerEdgeColor', c, 'Marker', 'o')
            end
            scatter(lux(il), mean(data)*10e3, 'MarkerEdgeColor', c, 'Marker', 'o', 'MarkerFaceColor', c);

        end

        set(gca, 'XScale', 'log'); % Set log scale for x-axis
        grid on; % Display grid
        title([fish_name, ' ', strrep(field_name, '_', ' '), ' Distributions']); % Set plot title

        x_ticks = res(1).lux;
        xticks(res(1).lux);
        xticklabels(x_ticks);

        xlim([0, 220]);
        % Labeling
        xlabel('Illuminance (lux)');
        ylabel('X-Position RMS (cm^2)')

        % Save the closed loop bode plots
        out_filename = [field_name, '_head_', fish_name, '_distribution.png'];

        saveas(gcf, [out_path, out_filename]);
        disp(['SUCCESS: ', out_filename, ' is saved.']);
    end

end


function [fitresult, gof] = createSigmoidFit(x, y)
%  Auto-generated by MATLAB on 12-Mar-2024 15:48:24


%% Fit: 'untitled fit 1'.
[xData, yData] = prepareCurveData( x, y );

% Set up fittype and options.
ft = fittype( 'a/(1+exp(-b*(x-c)))+d', 'independent', 'x', 'dependent', 'y' );
opts = fitoptions( 'Method', 'NonlinearLeastSquares' );
opts.Display = 'Off';
opts.StartPoint = [0.473288848902729 0.351659507062997 0.830828627896291 0.585264091152724];

% Fit model to data.
[fitresult, gof] = fit( xData, yData, ft, opts );

end

